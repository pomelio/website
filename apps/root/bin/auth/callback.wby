import ext.web as web;
import ext.github as github;
import ext.google as google;
import std.array as arr;
import ext.jwt as jwt;
import ext.mustache as mch;
import std.date as date;


let {code} = web.query();

let user_info = undefined;

if from == 'google' {
      let auth_result = google.get_auth_result(code, {});
      let token = google.get_access_token(auth_result);
      let google_client = google.new_client(token, {});
      let uinfo = google.get_user_info(google_client);
      user_info = {
            provider: 'google',
            name: uinfo['name'],
            picture: uinfo['picture'],
            id: uinfo['id']
      };

} elsif from == 'github' {
      let auth_result = github.get_auth_result(code, {});
      let access_token = github.get_access_token(auth_result);
      let uinfo = github.get_user_info(access_token);
      
      user_info = {
            provider: 'github',
            name: uinfo['login'],
            picture: uinfo['avatar_url'],
            id: uinfo['id']
      };
} else {
      throw({
            name: 'LOGIN_FROM_NOT_FOUND',
            message: 'login from is not found.'
      });
}


let project = {};
let project_json = github.get_global_content('/project.json');
if project_json {
      project = parse_json(project_json);
}


let header = mch.render_template('/template/header.mustache');
let footer = mch.render_template('/template/footer.mustache');


let user_info_docs_path = '/user_info.json';
let user_info_docs = [];

let user_info_docs_json = github.get_global_content(user_info_docs_path);
if user_info_docs_json {
      user_info_docs = parse_json(user_info_docs_json);
}

let user_info_doc = arr.find(user_info_docs, |u| => u['id'] == user_info['id']);
if !user_info_doc || user_info_doc != user_info {
      user_info_docs = arr.filter(user_info_docs, |u| => u['id'] != user_info['id']);
      arr.push(user_info_docs, user_info);
      github.save_global_text(user_info_docs_path, stringify_json(user_info_docs));
}

let user_id = user_info['id'];
let provider = user_info['provider'];
let timestamp = date.value_of(date.from_number());
let user_token = jwt.sign({id: user_id, provider, timestamp});
user_info['token'] = user_token;

let user_info_json = stringify_json(user_info);

let html = mch.render_template('/template/auth/login_callback.mustache');

web.body(html);