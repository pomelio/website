import ext.github as github;
import std.string as string;
import ext.web as web;
import std.array as array;
import ext.mustache as mch;
import ext.MarkDownIt as md;
import std.math as math;
import std.number as number;

let PAGE_SIZE = 20;

let query = web.query();
let page = 0;
if query['page'] {
  page = number.parse_int(query['page']);
}

let project = {};
let project_json = github.get_global_content('/project.json');
if project_json {
    project = parse_json(project_json);
}


let users_path = '/users.json';
let users = [];

let users_json = github.get_global_content(users_path);
if users_json {
  users = parse_json(users_json);
}

let likes = [];

let likes_json = github.get_global_content('/likes.json');
if likes_json {
  likes = parse_json(likes_json);
}

likes = array.filter(likes, |c| => c['clazz'] == 'blog' && c['doc'] == 'follower');

let likes_count = len(likes);

let likes_html = [];

let tmpl_like = mch.init('/template/like.mustache');

for (let i = 0; i < len(likes); i++) {
  let like = likes[i];
  let user = array.find(users, |u| => u['id'] == like['user_id']);
  let like_html = mch.render(tmpl_like);
  array.push(likes_html, like_html);
}

likes_html = array.join(likes_html, '');



let links = [];

if project['navi'] {
  let navi = project['navi'];
  let keys = keys(navi);
  array.for_each(keys, |k| => {
    let title = k;
    let url = navi[k];
    let active = false;

    array.push(links, {
      title, url, active
    });
  });
}

let side_bar_html = mch.render_template('/template/sidebar.mustache');

let blog = {};
if project['blog'] {
  blog = project['blog'];
}



let blogs = blog['blogs'];

let {page} = web.query();

if !page {
    page = 0;
}

let HOST_NAME = web.hostname();

let blogs_count = len(blogs);
let offset = page * PAGE_SIZE;

let end = offset + PAGE_SIZE;

if end > blogs_count {
    end = blogs_count;
}

blogs = array.slice(blogs, offset, end);

let tmp_card = mch.init('/template/blog_card.mustache');

let cards = [];

let page_count = math.floor(blogs_count / PAGE_SIZE) + 1;

for (let i = 0; i < blogs_count; i++) {
  let markdown_file = blogs[i];

  let md_result = md.render('/blogs/' + markdown_file);
  let metas = md.get_metas(md_result);

  let is_player_card = false;
  let is_summary_card = false;
  let is_summary_image_card = false;

  let player_url = null;
  let image_url = null;
  let video = metas['video'];
  let image = metas['image'];
  let title = metas['title'];
  let description = metas['description'];
  let pub_date = metas['pub_date'];

  if video {
    is_player_card = true;
    is_summary_card = false;
    is_summary_image_card = false;

    let youtubeID = video['youtubeID'];
    image_url = 'https://img.youtube.com/vi/' + youtubeID + '/0.jpg';
  } elsif image {
    is_player_card = false;
    is_summary_card = false;
    is_summary_image_card = true;
    
    image_url = image['src'];
  } else {
    is_player_card = false;
    is_summary_card = true;
    is_summary_image_card = false;
    
  }
  
  let card_html = mch.render(tmp_card);
  array.push(cards, card_html);
}

let content = array.join(cards, '');

let footer_links = [];

if project['footer']['links'] {
    let f_links = project['footer']['links'];
    let keys = keys(f_links);
    array.for_each(keys, |k| => {
        let title = k;
        let url = f_links[k];
       
        array.push(footer_links, {
            title, url
        });
  });
}

let header_html = mch.render_template('/template/header.mustache');
let footer_html = mch.render_template('/template/footer.mustache');

let html = mch.render_template('/template/blogs.mustache');

web.body(html);

