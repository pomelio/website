import ext.web as web;
import ext.MarkDownIt as md;
import std.string as str;
import ext.mustache as mch;
import ext.github as github;
import std.array as array;
import std.date as dt;

let web_path = web.path();

let fidx = str.last_index_of(web_path, '/');
if fidx == -1 {
  throw({
    message: 'markdown not found.'
  });
}
let doc_name = str.substring(web_path, fidx + 1);


let project = {};
let project_json = github.get_global_content('/project.json');
if project_json {
    project = parse_json(project_json);
}

let app = {};
let app_json = github.get_app_content('/app.json');
if app_json {
  app= parse_json(app_json);
}

let blog = {};
if app['blog'] {
  blog = app['blog'];
}


let links = [];

if app['navi'] {
  let navi = app['navi'];
  let keys = keys(navi);
  array.for_each(keys, |k| => {
    let title = k;
    let url = navi[k];
    let active = false;

    array.push(links, {
      title, url, active
    });
  });
}

let side_bar_html = mch.render_template('/template/sidebar.mustache');


let PAGE_IDENTIFIER = web_path;

let DOC_NAME = doc_name;
let HOST_NAME = web.hostname();


let users_path = '/users.json';
let users = [];

let users_json = github.get_global_content(users_path);
if users_json {
  users = parse_json(users_json);
}

let likes = [];

let likes_json = github.get_global_content('/likes.json');
if likes_json {
  likes = parse_json(likes_json);
}

likes = array.filter(likes, |c| => c['clazz'] == 'blog' && c['doc'] == DOC_NAME);

let likes_count = len(likes);

let likes_html = [];

let tmpl_like = mch.init('/template/like.mustache');

for (let i = 0; i < len(likes); i++) {
  let like = likes[i];
  let user = array.find(users, |u| => u['id'] == like['user_id']);
  let like_html = mch.render(tmpl_like);
  array.push(likes_html, like_html);
}

likes_html = array.join(likes_html, '');


let comments = [];

let comments_json = github.get_global_content('/comments.json');
if comments_json {
  comments = parse_json(comments_json);
}

comments = array.filter(comments, |c| => c['clazz'] == 'blog' && c['doc'] == DOC_NAME);

let comments_count = len(comments);

let comments_html = [];

let tmpl_comment = mch.init_global('/template/comment.mustache');

for (let i = 0; i < comments_count; i++) {
  let comment = comments[i];
  let md_comment_result = md.render_source(comment['value']);
  let comment_content = md.get_html(md_comment_result);
  let metas = md.get_metas(md_comment_result);
  let comment_time = dt.from_now(dt.from_number(comment['create_time']));
  let user = array.find(users, |u| => u['id'] == comment['user_id']);
  let comment_html = mch.render(tmpl_comment);
  array.push(comments_html, comment_html);
}

comments_html = array.join(comments_html, '');

let md_result = md.render('/blogs/' + doc_name);
let blog_content = md.get_html(md_result);
let metas = md.get_metas(md_result);

let footer_links = [];

if project['footer']['links'] {
    let f_links = project['footer']['links'];
    let keys = keys(f_links);
    array.for_each(keys, |k| => {
        let title = k;
        let url = f_links[k];
       
        array.push(footer_links, {
            title, url
        });
  });
}

let header_html = mch.render_global_template('/template/header.mustache');
let footer_html = mch.render_global_template('/template/footer.mustache');


let html = mch.render_template('/template/blog.mustache');



web.body(html);
