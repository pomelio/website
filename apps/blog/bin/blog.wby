import ext.web as web;
import ext.MarkDownIt as md;
import std.string as str;
import ext.mustache as mch;
import ext.github as github;
import std.array as arr;
import std.date as dt;

let web_path = web.path();

let fidx = str.last_index_of(web_path, '/');
if fidx == -1 {
  throw({
    message: 'markdown not found.'
  });
}
let doc_name = str.substring(web_path, fidx + 1);


let project_json = github.get_global_content('/project.json');
let project = parse_json(project_json);

let header = mch.render_template('/template/header.mustache');
let footer = mch.render_template('/template/footer.mustache');


let PAGE_IDENTIFIER = web_path;

let DOC_PATH = web_path;
let HOST_NAME = web.hostname();

let comments = [];

let comments_json = github.get_global_content('/comment.json');
if comments_json {
  comments = parse_json(comments_json);
}

comments = arr.filter(comments, |c| => c['doc'] == DOC_PATH);

let user_info_docs_path = '/user_info.json';
let user_info_docs = [];

let user_info_docs_json = github.get_global_content(user_info_docs_path);
if user_info_docs_json {
  user_info_docs = parse_json(user_info_docs_json);
}

let comments_html = [];

let tmplComment = mch.init('/template/comment.mustache');

for (let i = 0; i < len(comments); i++) {
  let comment = comments[i];
  comment['value'] = md.render_source(comment['value']);
  let comment_time = dt.from_now(dt.from_number(comment['create_time']));
  let user = arr.find(user_info_docs, |u| => u['id'] == comment['user_id']);
  let comment_html = mch.render(tmplComment);
  arr.push(comments_html, comment_html);
}

comments_html = arr.join(comments_html, '');

let md_result = md.render('/blogs/' + doc_name);
let content = md.get_html(md_result);
let metas = md.get_metas(md_result);

let html = mch.render_template('/template/blog.mustache');

web.body(html);
