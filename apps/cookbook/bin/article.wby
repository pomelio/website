import ext.web as web;
import ext.MarkDownIt as md;
import std.string as str;
import ext.mustache as mch;
import ext.github as github;
import std.array as array;
import std.date as dt;

let web_path = web.path();

let fidx = str.last_index_of(web_path, '/');
if fidx == -1 {
  throw({
    message: 'markdown not found.'
  });
}
let doc_name = str.substring(web_path, fidx + 1);


let side_bar_data = github.get_app_content('/side_bar.json');

let side_bar_json = parse_json(side_bar_data);

let sections = side_bar_json['sections'];

let section_html_list = [];
let tmplSection = mch.init('/template/sidebar_section.mustache');

for (let i = 0; i < len(sections); i++) {
  let section = sections[i];
  
  let topics = section['topics'];
  topics = array.map(topics, |t|=>{
    
    return {...t, md: '/' + __APP__ + '/' + t['md'], active: t['md'] == doc_name};
  });
  
  let title = section['title'];
  let section_html = mch.render(tmplSection);
  array.push(section_html_list, section_html);
}

let title = side_bar_json['title'];
let side_bar_content_html = array.join(section_html_list, '');

let side_bar_html = mch.render_template('/template/sidebar.mustache');

let project_json = github.get_global_content('/project.json');
let project = parse_json(project_json);

let footer_links = [];

if project['footer']['links'] {
    let f_links = project['footer']['links'];
    let keys = keys(f_links);
    array.for_each(keys, |k| => {
        let title = k;
        let url = f_links[k];
       
        array.push(footer_links, {
            title, url
        });
  });
}

let header_html = mch.render_global_template('/template/header.mustache');
let footer_html = mch.render_global_template('/template/footer.mustache');


let PAGE_IDENTIFIER = web_path;

let DOC_NAME = doc_name;
let HOST_NAME = web.hostname();

let comments = [];

let comments_json = github.get_global_content('/comments.json');
if comments_json {
  comments = parse_json(comments_json);
}

comments = array.filter(comments, |c| => c['clazz'] == 'cookbook' && c['doc'] == DOC_NAME);

let users_path = '/users.json';
let users = [];

let users_json = github.get_global_content(users_path);
if users_json {
  users = parse_json(users_json);
}

let comments_html = [];

let tmpl_comment = mch.init_global('/template/comment.mustache');
let comments_count = len(comments);

for (let i = 0; i < comments_count; i++) {
  let comment = comments[i];
  let md_comment_result = md.render_source(comment['value']);
  let comment_content = md.get_html(md_comment_result);
  let metas = md.get_metas(md_comment_result);
  let comment_time = dt.from_now(dt.from_number(comment['create_time']));
  let user = array.find(users, |u| => u['id'] == comment['user_id']);
  let comment_html = mch.render(tmpl_comment);
  array.push(comments_html, comment_html);
}

comments_html = array.join(comments_html, '');

let md_result = md.render('/articles/' + doc_name);
let article_content = md.get_html(md_result);
let metas = md.get_metas(md_result);

let html = mch.render_template('/template/article.mustache');

web.body(html);
